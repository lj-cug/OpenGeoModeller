Makefile 编译动态库文件及链接动态库

文件目录结构如下

dynamiclibapp.c
Makefile
comm/inc/apue.h
comm/errorhandle.c
dynamiclib/Makefile
dynamiclib/dynamiclib_add.c
dynamiclib/dynamiclib_mul.c
dynamiclib/inc/dynamiclibs.h
dynamiclib/libs/

 dynamiclib目录

    dynamiclib/inc/dynamiclibs.h 文件内容如下:
	
#ifndef __dynamic_libs_h__
#define __dynamic_libs_h__

#include "apue.h"
int dynamic_lib_func_add(int i1, int i2);
int dynamic_lib_func_mul(int i1, int i2);
#endif

    dynamiclib/dynamiclib_add.c 文件内容如下:

#include "dynamiclibs.h"

int dynamic_lib_func_add(int i1, int i2) 
{
    int iret = i1 + i2; 
    printf("... in .so func, %d add %d,return %d\n", i1, i2, iret);
    return iret;
}

    dynamiclib/dynamiclib_mul.c 文件内容如下:

#include "dynamiclibs.h"

int dynamic_lib_func_mul(int i1, int i2) 
{
    int iret = i1 * i2; 
    printf("... in .so func, %d multiplys %d, retun %d\n", i1, i2, iret);
    return iret;
}

    dynamiclib/Makefile 文件内容如下:

 CC       = gcc 
 CFLAGS   = -Wall -g -O -fPIC     #需要加上 -fPIC
 CXXFLAGS = 
 INCLUDE  = -I ./inc -I ../comm/inc
 TARGET   = libmytest.so
 LIBPATH  = ./libs/
 
 vpath %.h ./inc
 
 OBJS     = dynamiclib_add.o dynamiclib_mul.o
 SRCS     = dynamiclib_add.c dynamiclib_mul.c
 
 $(OBJS):$(SRCS)
    $(CC) $(CFLAGS) $(INCLUDE) -c $^
 
 all:$(OBJS)
    $(CC) -shared -fPIC -o $(TARGET) $(OBJS)    需要加上 -shared -fPIC
    mv $(TARGET) $(LIBPATH)
 
 clean:
    rm -f *.o
    rm -f $(LIBPATH)*

    以上文件，就可以生成动态库文件 libmytest.so，应用程序以两种方式加载动态库函数，如下

2. 在编译应用程序时加载动态库

    dynamiclibapp.c 文件内容如下：

#include "apue.h"
#include "dynamiclibs.h"

int main(int argc, char *argv[])
{
    err_msg("step in main\n");
    dynamic_lib_func_add(1, 9); 
    dynamic_lib_func_mul(1, 9); 
    err_msg("step out main\n");

    return 0;
}

    Makefile 文件内容如下：

 CC       = gcc 
 CFLAGS   = -Wall -O -g
 CXXFLAGS = 
 INCLUDE  = -I ./comm/inc -I ./dynamiclib/inc
 TARGET   = dynamiclibapp
 LIBVAR   = -lmytest             指明需要链接动态库 libmytest.so
 LIBPATH  = -L./dynamiclib/libs  指明 libmytest.so 的路径
 #search paths for errorhandler.c
 vpath %.c ./comm
 #下行是为依赖项 apue.h 准备的，比如 [errorhandler.o:errorhandler.c apue.h] 里的 apue.h
 vpath %.h ./comm/inc
 
 OBJS     = errorhandler.o dynamiclibapp.o
 #下行的 apue.h，可以不必写出来
 errorhandler.o:errorhandler.c apue.h
    $(CC) $(CFLAGS) $(INCLUDE) -c $^
 dynamiclibapp.o:dynamiclibapp.c apue.h
    $(CC) $(CFLAGS) $(INCLUDE) -c $^
 
 all:$(OBJS) $(LIB)
    cd ./dynamiclib && make all
    $(CC) $(CFLAGS) $(INCLUDE) -o $(TARGET) $(OBJS) $(LIBPATH) $(LIBVAR)
    在上行中，在执行编译时，加载了 libmytest.so 中函数
 clean:
    rm -f *.o
    rm -f comm/inc/*.gch
    rm -f $(TARGET)
    cd ./dynamiclib && make clean

    对于这种方式编译出来的动态库文件，还需要在 /etc/ld.so.conf.d/ 目录中添加 libmytest.so 库文件的路径说明，

    即在 /etc/ld.so.conf.d/ 目录中新建配置文件 mytest.conf，且执行 ldconfig， /etc/ld.so.conf.d/mytest.conf 的文件内容为libmytest.so 库文件的绝对路径，例如：

 /home/lijiangtao/dynamiclib/libs
    如果不在编译应用程序时加载动态库文件里的函数，而是改为在应用程序执行时(比如：程序的main函数启动期间，或在程序执行期间)加载 libmytest.so 里函数，那么就可以不需在 /etc/ld.so.conf.d/ 目录中配置 libmytest.so路径，具体如下所述。

3. 在应用程序执行时加载动态库

    dynamiclibapp.c 文件内容如下：

#include "apue.h"
#include "dynamiclibs.h"
#include <dlfcn.h>

typedef int (*fp_lib_add)(int, int);
typedef int (*fp_lib_mul)(int, int);
typedef void* dlhandle;

dlhandle      dll      = NULL;
fp_lib_add    func_add = NULL;
fp_lib_mul    func_mul = NULL;

dlhandle load_dynamic_func(char *psopath, fp_lib_add *padd, fp_lib_mul *pmul);

int main(int argc, char *argv[])
{
    char *pso = "/home/lijiangtao/dynamiclib/libs/libmytest.so";//指定 .so 路径
    dll = load_dynamic_func(pso, &func_add, &func_mul);//程序执行时，加载动态函数
    err_msg("step in main\n");
    func_add(1, 9);//执行 add 函数
    func_mul(1, 9);//执行 mul 函数
    err_msg("step out main\n");

    return 0;
}

dlhandle load_dynamic_func(char *psopath, fp_lib_add *padd, fp_lib_mul *pmul)
{
    if(NULL == psopath ||'\0' == psopath[0])
        return NULL;
    char *perrormsg = NULL;
    dlhandle dllhandle = dlopen(psopath, RTLD_LAZY);
    if(NULL == dllhandle) 
    {   
        printf("%s\n", dlerror());
        return NULL;
    } 
    if(NULL != padd)
    {
        *padd = dlsym(dllhandle, "dynamic_lib_func_add");//加载 add 函数
        perrormsg = dlerror();
        if(NULL != perrormsg)
            printf("%s\n", perrormsg);
    }
    if(NULL != pmul)
    {
        *pmul = dlsym(dllhandle, "dynamic_lib_func_mul");//加载 mul 函数
        perrormsg = dlerror();
        if(NULL != perrormsg)
            printf("%s\n", perrormsg);
    }
    return dllhandle;
}

    Makefile 文件内容如下：
CC       = gcc 
CFLAGS   = -Wall -O -g
CXXFLAGS = 
INCLUDE  = -I ./comm/inc -I ./dynamiclib/inc
TARGET   = dynamiclibapp
LIBVAR   = -ldl    # 需要链接 libdl.so 库
LIBPATH  = 
#search paths for errorhandler.c
vpath %.c ./comm
#下行是为依赖项 apue.h 准备的，比如 [errorhandler.o:errorhandler.c apue.h] 里的 apue.h
vpath %.h ./comm/inc

OBJS     = errorhandler.o dynamiclibapp.o
#下行的 apue.h，可以不必写出来
errorhandler.o:errorhandler.c apue.h
   $(CC) $(CFLAGS) $(INCLUDE) -c $^
dynamiclibapp.o:dynamiclibapp.c apue.h
   $(CC) $(CFLAGS) $(INCLUDE) -c $^

all:$(OBJS) $(LIB)
   cd ./dynamiclib && make all
   $(CC) $(CFLAGS) -rdynamic $(INCLUDE) -o $(TARGET) $(OBJS) $(LIBPATH) $(LIBVAR)
   在上行，执行编译时并没有加载动态接口函数，而是在应用程序执行时加载的；需要 -rdynamic 选项，以确保 dlopen 这些接口可用
clean:
   rm -f *.o
   rm -f $(TARGET)
   cd ./dynamiclib && make clean

    对于这种方式编译出来的动态库文件，不需要在 /etc/ld.so.conf.d/ 目录中配置 libmytest.so 库文件的路径说明




