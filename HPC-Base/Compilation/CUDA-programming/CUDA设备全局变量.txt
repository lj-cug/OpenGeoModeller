cuda 全局device变量的用法

device全局变量的使用主要用到了两个函数：

cudaMemcpyToSymbol（）
cudaMemcpyFromSymbol（）

__constant__ float constData[256];
float data[256];
cudaMemcpyToSymbol(constData, data, sizeof(data));
cudaMemcpyFromSymbol(data, constData, sizeof(data));

__device__ float devData;
float value = 3.14f;
cudaMemcpyToSymbol(devData, &value, sizeof(float));

__device__ float* devPointer;
float* ptr;
cudaMalloc(&ptr, 256 * sizeof(float));
cudaMemcpyToSymbol(devPointer, &ptr, sizeof(ptr));


假设下面代码保存在var.cu

#include <iostream>
#include <cuda.h>
#include <cuda_runtime.h>

using namespace std;

__device__ int d_data;

__global__ void changeData()
{
   d_data = 567;
}


int main()
{
   cudaError_t err;
   int h_data = 123;
   cudaSetDevice(0);
   cout<<"before kernel, h_data = "<<h_data<<endl;
   changeData<<<1,1>>>();
   err = cudaMemcpyFromSymbol((void*)&h_data, d_data, sizeof(int));
   if(err != cudaSuccess)
   {
      cout<<"from symbol error!"<<endl;
      exit(0);
   }
   cout<<h_data<<endl;
   cudaDeviceReset();
   return 0;
}
编译文件：nvcc var.cu -o var -arch=sm_35

运行可执行文件: ./var

before kernel, h_data =123
567

-------------------------------------
CUDA中如何在设备上分配全局变量

假设定义了全局变量 __device__ int *a;  

我需要一个数组，动态分配，那么直接调用cudaMalloc来为a分配内存的话，是不行的。

具体做法如下
int *tmp;  
cudaMalloc((void **)&tmp, sizeof(int) * num);  
cudaMemcpyToSymbol(a, &tmp, sizeof(int *),size_t(0), cudaMemcpyHostToDevice);  

使用cudaMemcpyToSymbol来把一个动态分配的设备指针写入一个静态的符号。所以是sizeof(int *)，只是把指针写给a。

拷贝数组:
__device__ double d_a[2]；

int main()
{
    double h_a[2];

    h_a[0]=0.1；
    h_a[1]=0.2；
    
    cudaMemcpyToSymbol(d_a, h_a, 2*sizeof(double));

    return 0;
}

拷贝变量:
__device__ double d_a；
int main()
{
    double h_a;

    h_a=0.1;;
    
    cudaMemcpyToSymbol(d_a, &h_a, sizeof(double));

    return 0;
}



