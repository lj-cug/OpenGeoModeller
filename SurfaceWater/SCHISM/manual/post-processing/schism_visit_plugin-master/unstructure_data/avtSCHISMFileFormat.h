/*****************************************************************************
*
* Copyright (c) 2000 - 2012, Lawrence Livermore National Security, LLC
* Produced at the Lawrence Livermore National Laboratory
* LLNL-CODE-442911
* All rights reserved.
*
* This file is  part of VisIt. For  details, see https://visit.llnl.gov/.  The
* full copyright notice is contained in the file COPYRIGHT located at the root
* of the VisIt distribution or at http://www.llnl.gov/visit/copyright.html.
*
* Redistribution  and  use  in  source  and  binary  forms,  with  or  without
* modification, are permitted provided that the following conditions are met:
*
*  - Redistributions of  source code must  retain the above  copyright notice,
*    this list of conditions and the disclaimer below.
*  - Redistributions in binary form must reproduce the above copyright notice,
*    this  list of  conditions  and  the  disclaimer (as noted below)  in  the
*    documentation and/or other materials provided with the distribution.
*  - Neither the name of  the LLNS/LLNL nor the names of  its contributors may
*    be used to endorse or promote products derived from this software without
*    specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR  IMPLIED WARRANTIES, INCLUDING,  BUT NOT  LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND  FITNESS FOR A PARTICULAR  PURPOSE
* ARE  DISCLAIMED. IN  NO EVENT  SHALL LAWRENCE  LIVERMORE NATIONAL  SECURITY,
* LLC, THE  U.S.  DEPARTMENT OF  ENERGY  OR  CONTRIBUTORS BE  LIABLE  FOR  ANY
* DIRECT,  INDIRECT,   INCIDENTAL,   SPECIAL,   EXEMPLARY,  OR   CONSEQUENTIAL
* DAMAGES (INCLUDING, BUT NOT  LIMITED TO, PROCUREMENT OF  SUBSTITUTE GOODS OR
* SERVICES; LOSS OF  USE, DATA, OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER
* CAUSED  AND  ON  ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT
* LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY  WAY
* OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
* DAMAGE.
*
*****************************************************************************/

// ************************************************************************* //
//                            avtSCHISMFileFormat.h                           //
// ************************************************************************* //

#ifndef AVT_SCHISM_FILE_FORMAT_H
#define AVT_SCHISM_FILE_FORMAT_H

#include <avtMTSDFileFormat.h>

#include <vector>
#include <map>

#include <memory>
#include <vtkUnstructuredGrid.h>
#include "FileFormatFavorInterface.h"

class FileFormatFavorInterface;

// ****************************************************************************
//  Class: avtSCHISMFileFormat
//
//  Purpose:
//      Reads in SCHISMOutput files as a plugin to VisIt.
//
//  Programmer: qshu -- generated by xml2avt
//  Creation:   FRI NOV 20 09:13:49 PDT 2015
//
// ****************************************************************************

class avtSCHISMFileFormat : public avtMTSDFileFormat
{
  public:
                    avtSCHISMFileFormat(const char *);
  virtual           ~avtSCHISMFileFormat() {;};
  
  //
  // This is used to return unconvention data -- ranging from material
  // information to information about block connectivity.
  //
  // virtual void      *GetAuxiliaryData(const char *var, int timestep, 
  //                                     const char *type, void *args, 
  //                                     DestructorFunction &);
  //
  
  //
  // If you know the times and cycle numbers, overload this function.
  // Otherwise, VisIt will make up some reasonable ones for you.
  //
  // virtual void        GetCycles(std::vector<int> &);

  virtual void           GetTimes(std::vector<double> & a_times);
  virtual int            GetNTimesteps(void);
  virtual void           ActivateTimestep(void);
  virtual const char    *GetType(void)   { return "UGrid"; };
  virtual void           FreeUpResources(void); 
  
  virtual vtkDataSet    *GetMesh(int          a_timeState, 
                                 const char * a_meshName);

  virtual vtkDataArray  *GetVar(int           a_timeState,
                                const char *  a_varName);

  virtual vtkDataArray  *GetVectorVar(int          a_timeState, 
                                      const char * a_varName);

  //expose private AddMesh,scalar var and vector var,  of avtMTSDFileFormat
  void addMeshToMetaData(avtDatabaseMetaData * a_metaData, 
                         const std::string & a_mesh_name, 
                         const avtMeshType & a_mt, 
                         double           *  a_extents, 
                         const int        &  a_nblocks, 
                         const int        &  a_block_origin,
                         const int        &  a_spatial_dimension, 
                         const int        &  a_topological_dimension);

  void  addScalarVarToMetaData(avtDatabaseMetaData * a_metaData, 
	                           const std::string & a_label,   
							   const std::string & a_mesh,
							   const avtCentering& a_center);

  void  addVectorVarToMetaData(avtDatabaseMetaData * a_metaData,
	                           const std::string &  a_varLabel,
							   const std::string &  a_mesh,
							   const avtCentering&  a_center,
							   const int &          a_comps);  

  avtVariableCache * get_cache();

protected:
  // DATA MEMBERS

  virtual void   PopulateDatabaseMetaData(avtDatabaseMetaData * a_metaData, 
                                          int                   a_timeState);

private:

	std::unique_ptr<FileFormatFavorInterface> m_impl;
	std::string m_data_file;
};


#endif
