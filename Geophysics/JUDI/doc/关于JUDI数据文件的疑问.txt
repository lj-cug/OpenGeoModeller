1 FWI工作流中读取初始速度模型和观测数据模型(segy or ?)的疑问

fwi_2D_small_overthrust_sgd.jl   中

# Load starting model
n,d,o,m0 = read(h5open("$(JUDI.JUDI_DATA)/small_overthrust_model.h5","r"), "n", "d", "o", "m0")
model0 = Model((n[1],n[2]), (d[1],d[2]), (o[1],o[2]), m0)

# n 是网格份数; d 是网格间距; o 是坐标原点; m0 是初始速度模型
# n, d, o  都是Tuple类型

......

# Load data
block = segy_read("$(JUDI.JUDI_DATA)/small_overthrust_shot_records.segy")
d_obs = judiVector(block)

# Save results

# Plot convergence and final result

#
#---------------------------------------------------------------
#
fwi_3D_overthrust_spg.jl    中
# Load overthrust model
if ~isfile("$(JUDI.JUDI_DATA)/overthrust_3D_initial_model.h5")
    ftp_data("ftp://slim.gatech.edu/data/SoftwareRelease/WaveformInversion.jl/3DFWI/overthrust_3D_initial_model.h5")
end
n, d, o, m0 = read(h5open("$(JUDI.JUDI_DATA)/overthrust_3D_initial_model.h5", "r"), "n", "d", "o", "m0")

......

# Scan directory for segy files and create out-of-core data container
container = segy_scan("/path/to/shot/records/", "overthrust_3D_shot",
                     ["GroupX", "GroupY", "RecGroupElevation", "SourceSurfaceElevation", "dt"])
d_obs = judiVector(container)

# Save results

2 生成速度模型数据的疑问
2.1 生成2D速度模型

# Load overthrust model
if ~isfile("$(JUDI.JUDI_DATA)/overthrust_model_2D.h5")
    ftp_data("ftp://slim.gatech.edu/data/SoftwareRelease/WaveformInversion.jl/2DFWI/overthrust_model_2D.h5")
end
n, d, o, m = read(h5open("$(JUDI.JUDI_DATA)/overthrust_model_2D.h5","r"), "n", "d", "o", "m")

... ...

# Generate data
d_obs = Pr*A_inv*adjoint(Ps)*q

block_out = judiVector_to_SeisBlock(d_obs, q; source_depth_key="SourceDepth")
segy_write("overthrust_2D.segy", block_out)


2.2 生成3D速度模型
# Load overthrust model
if ~isfile("$(JUDI.JUDI_DATA)/overthrust_3D_true_model.h5")
    ftp_data("ftp://slim.gatech.edu/data/SoftwareRelease/WaveformInversion.jl/3DFWI/overthrust_3D_true_model.h5")
end
n, d, o, m = read(h5open("$(JUDI.JUDI_DATA)/overthrust_3D_true_model.h5","r"), "n", "d", "o", "m")

... ...

# Set up modeling options
opt = Options(limit_m = true,
			  save_data_to_disk = true,
			  file_path = "path/to/shot/records",   # replace w/ path to directory in which data will be stored (~total of 1.7 TB)
 			  file_name = "overthrust_3D_shot_"     # adds x-y coordinates to name
              )

... ...

# Generate data and save as individual SEG-Y files to disk
d_obs = Pr*A_inv*adjoint(Ps)*q

# Save segy ???			  

